// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  trips         Trip[]
  roles         Role[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  users     User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Restaurant {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  zip       String
  cuisine   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dishes    Dish[]
  orders    Order[]
  reviews   Review[]
}

model Dish {
  id           String     @id @default(cuid())
  name         String
  price        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  orders       Order[]
}

model Order {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  dishes       Dish[]
}

model Review {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  rating       Int
  comment      String
}


//toDelete
model Trip {
    id          String   @id @default(cuid()) 
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title        String
    description String
    startDate   DateTime
    photos       Photo[]
    endDate     DateTime
    hashtags    Hastag[]
    location    String
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Hastag {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    trips     Trip[]
}

model Photo {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String
    tripId    String
    trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}
